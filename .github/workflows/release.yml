name: Release - 自动发布工作流

on:
  push:
    tags:
      - 'v*.*.*'
  workflow_dispatch:
    inputs:
      version:
        description: '发布版本号 (例如: v4.5.0)'
        required: true
        type: string
      test_level:
        description: '测试级别'
        required: true
        default: 'regression'
        type: choice
        options:
          - smoke
          - regression
          - full
      force_release:
        description: '强制发布 (跳过质量门禁)'
        required: false
        default: false
        type: boolean

env:
  PYTHON_VERSION: '3.11'
  NODE_VERSION: '20'

jobs:
  # 质量门禁检查
  quality-gate:
    name: 质量门禁检查
    runs-on: ubuntu-latest
    outputs:
      should_proceed: ${{ steps.gate-check.outputs.proceed }}
      test_level: ${{ steps.gate-check.outputs.test_level }}
    
    steps:
    - name: Checkout代码
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: 设置Python环境
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: 安装依赖
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: 质量门禁检查
      id: gate-check
      run: |
        python -c "
        import sys
        import os
        sys.path.append('.')
        
        from core.components.release_trigger_mcp.release_trigger_engine import ReleaseTriggerEngine
        
        # 初始化发布引擎
        engine = ReleaseTriggerEngine()
        
        # 获取版本信息
        version = '${{ github.event.inputs.version || github.ref_name }}'
        test_level = '${{ github.event.inputs.test_level || \"regression\" }}'
        force = '${{ github.event.inputs.force_release }}' == 'true'
        
        print(f'检查版本: {version}')
        print(f'测试级别: {test_level}')
        print(f'强制发布: {force}')
        
        # 创建发布信息
        release_info = {
            'version': version,
            'branch': 'main',
            'manual_trigger': True,
            'force': force
        }
        
        # 检查发布条件
        import asyncio
        async def check():
            if force:
                print('强制发布模式，跳过条件检查')
                return True
            return await engine._check_release_conditions(release_info)
        
        should_proceed = asyncio.run(check())
        
        print(f'::set-output name=proceed::{str(should_proceed).lower()}')
        print(f'::set-output name=test_level::{test_level}')
        
        if not should_proceed and not force:
            print('❌ 质量门禁检查失败')
            sys.exit(1)
        else:
            print('✅ 质量门禁检查通过')
        "

  # Test MCP集成测试
  test-mcp-integration:
    name: Test MCP集成测试
    runs-on: ubuntu-latest
    needs: quality-gate
    if: needs.quality-gate.outputs.should_proceed == 'true'
    
    strategy:
      matrix:
        test-suite: [core, integration, ui, performance]
    
    steps:
    - name: Checkout代码
      uses: actions/checkout@v4
    
    - name: 设置Python环境
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: 设置Node.js环境
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
    
    - name: 安装Python依赖
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-asyncio pytest-mock
    
    - name: 安装Node.js依赖
      run: |
        npm install
    
    - name: 运行Test MCP集成测试
      run: |
        python -c "
        import asyncio
        import sys
        import json
        sys.path.append('.')
        
        from core.components.release_trigger_mcp.test_mcp_integration import TestMCPIntegration
        
        async def run_tests():
            # 初始化Test MCP
            config = {
                'testing_framework': {},
                'test_runner_config': None
            }
            test_mcp = TestMCPIntegration(config)
            
            # 创建发布信息
            release_info = {
                'version': '${{ github.event.inputs.version || github.ref_name }}',
                'branch': 'main',
                'commit_hash': '${{ github.sha }}'
            }
            
            # 运行测试
            test_level = '${{ needs.quality-gate.outputs.test_level }}'
            results = await test_mcp.run_tests_for_release(release_info, test_level)
            
            # 输出结果
            print(f'测试套件: ${{ matrix.test-suite }}')
            print(f'测试级别: {test_level}')
            print(f'测试结果: {json.dumps(results, indent=2, ensure_ascii=False)}')
            
            # 检查测试是否通过
            if not results.get('success', False):
                print('❌ 测试失败')
                sys.exit(1)
            else:
                print('✅ 测试通过')
        
        asyncio.run(run_tests())
        "
    
    - name: 上传测试结果
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: test-results-${{ matrix.test-suite }}
        path: test_results/

  # Release Trigger Engine测试
  release-trigger-test:
    name: Release Trigger Engine测试
    runs-on: ubuntu-latest
    needs: [quality-gate, test-mcp-integration]
    
    steps:
    - name: Checkout代码
      uses: actions/checkout@v4
    
    - name: 设置Python环境
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: 安装依赖
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: 测试Release Trigger Engine
      run: |
        python -c "
        import asyncio
        import sys
        sys.path.append('.')
        
        from core.components.release_trigger_mcp.release_trigger_engine import ReleaseTriggerEngine
        
        async def test_engine():
            # 初始化引擎
            engine = ReleaseTriggerEngine()
            
            # 获取状态
            status = engine.get_status()
            print(f'引擎状态: {status}')
            
            # 测试手动触发发布
            version = '${{ github.event.inputs.version || github.ref_name }}'
            force = '${{ github.event.inputs.force_release }}' == 'true'
            
            result = await engine.trigger_manual_release(version, force)
            print(f'手动触发结果: {result}')
            
            if not result.get('success', False):
                print('❌ Release Trigger测试失败')
                sys.exit(1)
            else:
                print('✅ Release Trigger测试通过')
        
        asyncio.run(test_engine())
        "

  # 构建和部署
  build-and-deploy:
    name: 构建和部署
    runs-on: ubuntu-latest
    needs: [quality-gate, test-mcp-integration, release-trigger-test]
    
    steps:
    - name: Checkout代码
      uses: actions/checkout@v4
    
    - name: 设置Python环境
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: 设置Node.js环境
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
    
    - name: 安装依赖
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        npm install
    
    - name: 构建项目
      run: |
        echo "🔨 开始构建项目..."
        
        # 创建构建目录
        mkdir -p build/release
        
        # 复制核心文件
        cp -r core/ build/release/
        cp -r deployment/ build/release/
        cp requirements.txt build/release/
        cp *.py build/release/
        
        # 构建前端（如果存在）
        if [ -f "package.json" ]; then
          npm run build || echo "前端构建跳过"
        fi
        
        echo "✅ 项目构建完成"
    
    - name: 创建发布包
      run: |
        cd build
        tar -czf aicore0707-${{ github.event.inputs.version || github.ref_name }}.tar.gz release/
        echo "📦 发布包创建完成"
    
    - name: 部署到设备目录
      run: |
        # 部署到Mac设备目录
        mkdir -p deployment/devices/mac/${{ github.event.inputs.version || github.ref_name }}
        cp -r build/release/* deployment/devices/mac/${{ github.event.inputs.version || github.ref_name }}/
        
        echo "🚀 部署到设备目录完成"
    
    - name: 创建GitHub Release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.event.inputs.version || github.ref_name }}
        release_name: aicore0707 ${{ github.event.inputs.version || github.ref_name }}
        body: |
          ## 🎉 aicore0707 ${{ github.event.inputs.version || github.ref_name }} 发布
          
          ### ✨ 新功能
          - 🔄 Release Trigger MCP集成
          - 🧪 Test MCP能力整合
          - 📊 增强的测试框架
          - 🚀 自动化CI/CD流程
          
          ### 🔧 改进
          - 提升测试覆盖率
          - 优化发布流程
          - 增强错误处理
          
          ### 📋 测试信息
          - 测试级别: ${{ needs.quality-gate.outputs.test_level }}
          - 质量门禁: ✅ 通过
          - Test MCP集成: ✅ 通过
          
          ### 📦 部署信息
          - 部署目标: Mac设备
          - 部署路径: `deployment/devices/mac/${{ github.event.inputs.version || github.ref_name }}/`
        draft: false
        prerelease: false
    
    - name: 上传发布包
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: build/aicore0707-${{ github.event.inputs.version || github.ref_name }}.tar.gz
        asset_name: aicore0707-${{ github.event.inputs.version || github.ref_name }}.tar.gz
        asset_content_type: application/gzip

  # 发布通知
  notify:
    name: 发布通知
    runs-on: ubuntu-latest
    needs: [build-and-deploy]
    if: always()
    
    steps:
    - name: 发送成功通知
      if: needs.build-and-deploy.result == 'success'
      run: |
        echo "🎉 发布成功通知"
        echo "版本: ${{ github.event.inputs.version || github.ref_name }}"
        echo "状态: ✅ 成功"
        echo "时间: $(date)"
    
    - name: 发送失败通知
      if: needs.build-and-deploy.result == 'failure'
      run: |
        echo "❌ 发布失败通知"
        echo "版本: ${{ github.event.inputs.version || github.ref_name }}"
        echo "状态: ❌ 失败"
        echo "时间: $(date)"

